version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: onlineshop-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-changeme}
      MONGO_INITDB_DATABASE: onlineshop
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - onlineshop-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: onlineshop-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - onlineshop-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: onlineshop-backend
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD:-changeme}@mongodb:27017/onlineshop?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend/uploads:/app/uploads
    networks:
      - onlineshop-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: onlineshop-frontend
    restart: unless-stopped
    env_file:
      - ./frontend/.env
    environment:
      NODE_ENV: production
      NUXT_PUBLIC_API_BASE_URL: http://backend:3001/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - onlineshop-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: onlineshop-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - onlineshop-network

networks:
  onlineshop-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
